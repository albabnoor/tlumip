/* Generated by Together */

package com.pb.despair.model;

import java.util.*;

abstract public class AbstractCommodity {
	
	private static int nextCommodityNumber = 0;
    public final int commodityNumber;
	protected static final HashMap allCommoditiesHashmap = new HashMap();
    protected static final ArrayList allCommoditiesArrayList = new ArrayList();
	/** An attribute that represents ... */
	public final String name;
    /**
     * Commodities have certain "preferences" regarding what time they are shipped, what modes they are shipped on, and how
     * time sensitive they are.  These are the travel preferences for shipping the commodity from the exchange zone
     */
    protected TravelUtilityCalculatorInterface commodityTravelPreferences;

    protected AbstractCommodity(String name) {
        this.name = name;
        this.commodityNumber = nextCommodityNumber;
        nextCommodityNumber++;
        allCommoditiesHashmap.put(name,this);
        allCommoditiesArrayList.add(this);
       }

//    /**
//     * This method is temporary and should be deleted.  It will throw an error. 
//     * The only reason it is here is because without a public default constructor 
//     * Together 4.1 refuses to show properties (with attributes and get and set methods) 
//     * properly on class diagrams. 
//     */
//    public AbstractCommodity() {
//        throw new Error("Don't instantiate AbstractCommodity");
//    }
//


    public void setCommodityTravelPreferences(TravelUtilityCalculatorInterface commodityTravelPreferences){ this.commodityTravelPreferences = commodityTravelPreferences; }

    public TravelUtilityCalculatorInterface getCommodityTravelPreferences(){ return commodityTravelPreferences; }

    public String getName() { return name; }

    public String toString() { return name; };

    public int hashCode() { return name.hashCode(); };

    /**
     * This gets the ZUtility for a commodity in a zone, either the selling ZUtility or the buying ZUtility.
     * @param t the TAZ to get the buying or selling utility of
     * @param selling if true, get the selling utility.  Otherwise get the buying utility
     */
    public abstract double calcZUtility(AbstractTAZ t, boolean selling) throws OverflowException ;

    /**
     * 
     * @return An unmodifiable collection of all the commodities that have been created 
     */
    public static Collection getAllCommodities() {
        return allCommoditiesArrayList;
    }

    

}
