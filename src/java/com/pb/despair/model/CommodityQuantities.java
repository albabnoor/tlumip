/* Generated by Together */

package com.pb.despair.model;

/** This class describes amounts of commodities.  It is used as an abstract base class
* for ProductionFunctions and ConsumptionFunctions
* @see <{com.pb.despair.model.ProductionFunction}>
* @see <{com.pb.despair.model.ConsumptionFunction}>
* @author John Abraham
*/
public interface CommodityQuantities {
    // protected float[] commodityQuantities = new float[0];
    public int size();

    /** sorts internally so that when calcAmounts() or overallUtility() are called with commodity utilities passed in as an array of doubles,
     * the CommodityQuantities object knows which utility vlaue applies to which commodity.  This also affects subsequent calls to commodityAt()
     * and must be called before commodityAt() is called.*/
    public void sortToMatch(java.util.Collection commodityCollection);

    /**
     * returns the commodity at the position i from the last sort, i.e. the commodity that was at position i in the variable 
     * commodityCollection that was passed the last time sortToMatch was called
     * @associates <{com.pb.despair.model.AbstractCommodity}> 
     */
    public AbstractCommodity commodityAt(int i);

    /** this function returns the overall utility of producing or consuming given the ZUtilities of individual commodities.  sortToMatch must
    * have been called previously to establish the order and number of the commodities being considered */
    public double overallUtility(double[] individualCommodityUtilities);
    
    public double[] overallUtilityDerivatives(double[] individualCommodityUtilities);

    /** This function calculates the amount of each commodity given the utility of each commodity.
     * @param individualCommodityUtilities the utility of buying or selling each of the individual commodities that make up the list of commodities.   
     * sortToMatch must have been previously called to establish the order and number of commodities
     * @return an array specifying the amount of each commodity*/
    public double[] calcAmounts(double[] individualCommodityUtilities);
    public double[] amountsDerivatives(double[] individualCommodityUtilities);

}

